{"version":3,"sources":["../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","main.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/settings/_grid.scss","../node_modules/node-bourbon/node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_omega.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/functions/_private.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","// Put any @imports here\n// See Readme for a list of supported ones\n@import 'bourbon';\n@import 'neat';\n\n.container {\n  width: 75%;\n  margin: 5px auto;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n  background-color: black;\n  color: white;\n}\nbody {\n  background: black;\n}\n\n.top-bar {\n  background-color: #980C20;\n}\n\n.top-bar-section li:not(.has-form) a:not(.button) {\n    background: #980C20;\n}\n\nform {\n  width: 500px;\n  margin: 30px auto;\n}\n\n.tophead {\n  width: 70%;\n  margin: 0 5px;\n  h3{\n  color: #980C10;\n  }\n}\n\n.outergame {\n  @include outer-container\n  margin: 20px auto;\n  p {\n    width: 100%;\n    margin: 0;\n    background-color: #ccc;\n    color: #980C10;\n  }\n}\n\n.gamecontainer {\n  @include span-columns(4);\n  @include omega(3n);\n  width: 200px;\n  background-color: #980C10;\n  margin: 30px;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n}\n\nimg {\n  width: 50%;\n  height: 150px;\n  margin: auto 25%;\n  display: inline-block;\n}\n\n.gametitles {\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  background-color: #ccc;\n}\n\n.biggerpic {\n  width: 50%;\n  height: auto;\n  margin-right: 100%;\n  display: inline-block;\n  float:left;\n\n}\n\n.reviewcontainer {\n  width: 500px;\n  margin: 20px auto;\n  border: 1px solid red;\n  background-color: #ccc;\n  border-radius: 6px;\n  overflow: hidden;\n  p {\n    float:left;\n    width: 100%;\n    margin: 0;\n    background-color: #ccc;\n    color: #980C10;\n  }\n}\n\nfooter {\n  background-color: #980C10;\n}\n\n.amazonbuy {\n  display: inline-block;\n  margin: 0;\n  float: left;\n  width: 20%;\n  height: auto;\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about modular-scale() see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: modular-scale(3, 1em, $golden) !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about modular-scale() see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: modular-scale(1, 1em, $golden) !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. To learn more about `em()` see [Bourbon docs](http://bourbon.io/docs/#px-to-em). Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: em(1088) !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     box-sizing: border-box; }\n///\n///   *, *::after, *::before {\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n","// Not function for Libsass compatibility\n// https://github.com/sass/libsass/issues/368\n@function is-not($value) {\n  @return if($value, false, true);\n}\n\n// Checks if a number is even\n@function is-even($int) {\n  @return $int % 2 == 0;\n}\n\n// Checks if an element belongs to a list or not\n@function belongs-to($tested-item, $list) {\n  @return is-not(not-belongs-to($tested-item, $list));\n}\n\n@function not-belongs-to($tested-item, $list) {\n  @return is-not(index($list, $tested-item));\n}\n\n// Contains display value\n@function contains-display-value($query) {\n  @return belongs-to(table, $query)\n       or belongs-to(block, $query)\n       or belongs-to(inline-block, $query)\n       or belongs-to(inline, $query);\n}\n\n// Parses the first argument of span-columns()\n@function container-span($span: $span) {\n  @if length($span) == 3 {\n    $container-columns: nth($span, 3);\n    @return $container-columns;\n  } @else if length($span) == 2 {\n    $container-columns: nth($span, 2);\n    @return $container-columns;\n  }\n\n  @return $grid-columns;\n}\n\n@function container-shift($shift: $shift) {\n  $parent-columns: $grid-columns !default !global;\n\n  @if length($shift) == 3 {\n    $container-columns: nth($shift, 3);\n    @return $container-columns;\n  } @else if length($shift) == 2 {\n    $container-columns: nth($shift, 2);\n    @return $container-columns;\n  }\n\n  @return $parent-columns;\n}\n\n// Generates a striped background\n@function gradient-stops($grid-columns, $color: $visual-grid-color) {\n  $transparent: transparent;\n\n  $column-width: flex-grid(1, $grid-columns);\n  $gutter-width: flex-gutter($grid-columns);\n  $column-offset: $column-width;\n\n  $values: ($transparent 0, $color 0);\n\n  @for $i from 1 to $grid-columns*2 {\n    @if is-even($i) {\n      $values: append($values, $transparent $column-offset, comma);\n      $values: append($values, $color $column-offset, comma);\n      $column-offset: $column-offset + $column-width;\n    } @else {\n      $values: append($values, $color $column-offset, comma);\n      $values: append($values, $transparent $column-offset, comma);\n      $column-offset: $column-offset + $gutter-width;\n    }\n  }\n\n  @return $values;\n}\n\n// Layout direction\n@function get-direction($layout, $default) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" or to-upper-case($layout) == \"RTL\" {\n    $direction: direction-from-layout($layout);\n  } @else {\n    $direction: direction-from-layout($default);\n  }\n\n  @return $direction;\n}\n\n@function direction-from-layout($layout) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" {\n    $direction: right;\n  } @else {\n    $direction: left;\n  }\n\n  @return $direction;\n}\n\n@function get-opposite-direction($direction) {\n  $opposite-direction: left;\n\n  @if $direction == \"left\" {\n    $opposite-direction: right;\n  }\n\n  @return $opposite-direction;\n}\n"],"sourceRoot":"/source/"}